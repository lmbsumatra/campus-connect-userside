create campus_connect_DB;

use campus_connect_DB;

// adding users table
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    middle_name VARCHAR(50),
    last_name VARCHAR(50) NOT NULL,
    role ENUM('admin', 'student') NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


// adding students table
CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tup_id VARCHAR(15) UNIQUE,
    user_id INT,
    college ENUM('CAFA', 'CIE', 'CIT', 'CLA', 'COE', 'COS') NOT NULL,
    scanned_id BLOB NOT NULL,
    photo_with_id BLOB NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE admins (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    profile_pic BLOB NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE listings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    owner_id INT NOT NULL,
    category VARCHAR(50) NOT NULL,
    listing_name VARCHAR(100) NOT NULL,
    rate DECIMAL(10, 2) NOT NULL,
    delivery_mode ENUM('pickup', 'delivery') DEFAULT 'pickup',
    late_charges DECIMAL(10, 2) DEFAULT 0.00,
    security_deposit DECIMAL(10, 2) DEFAULT 0.00,
    repair_replacement TEXT,
    specifications JSON,
    description TEXT,
    listing_condition TEXT NOT NULL,  
    tags JSON,
    status ENUM('available', 'rented', 'flagged', 'pending') NOT NULL, 
    payment_mode ENUM('payment upon meetup', 'gcash') NOT NULL, 
    images JSON,   // for comparison with date and time
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (owner_id) REFERENCES users(user_id)
);

CREATE TABLE listing_rental_dates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    listing_id INT NOT NULL,
    rental_date DATE NOT NULL,
    FOREIGN KEY (listing_id) REFERENCES listings(id) ON DELETE CASCADE
);


CREATE TABLE listing_rental_durations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    date_id INT NOT NULL,
    rental_time_from TIME NOT NULL,
    rental_time_to TIME NOT NULL,
    FOREIGN KEY (date_id) REFERENCES listing_rental_dates(id) ON DELETE CASCADE
);


CREATE TABLE posts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_item_name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100),
    tags LONGTEXT,
    status ENUM('posted', 'offered', 'flagged', 'pending') NOT NULL,
    specifications LONGTEXT,
    renter_id INT,
    images LONGTEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE post_request_dates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    rental_date DATE NOT NULL,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
);


CREATE TABLE post_request_durations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    date_id INT NOT NULL,
    rental_time_from TIME NOT NULL,
    rental_time_to TIME NOT NULL,
    FOREIGN KEY (date_id) REFERENCES post_request_dates(id) ON DELETE CASCADE
);

use campus_connect_db;

CREATE TABLE dates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    item_id INT NOT NULL,
    date DATE NOT NULL,
    item_type ENUM('listing', 'post', 'item_for_sale') NOT NULL
);

CREATE TABLE durations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    date_id INT NOT NULL,
    rental_time_from TIME NOT NULL,
    rental_time_to TIME NOT NULL,
    FOREIGN KEY (date_id) REFERENCES dates(id) ON DELETE CASCADE
);


INSERT INTO dates (item_id, date, item_type)
SELECT id, rental_date, 'listing' FROM listing_rental_dates; 
INSERT INTO dates (item_id, date, item_type)
SELECT id, rental_date, 'post' FROM post_request_dates;  
INSERT INTO dates (item_id, date, item_type)
SELECT id, request_date, 'item_for_sale' FROM items_for_sale_requests; 

INSERT INTO durations (date_id, rental_time_from, rental_time_to)
SELECT date_id, rental_time_from, rental_time_to FROM listing_rental_durations; 
INSERT INTO durations (date_id, rental_time_from, rental_time_to)
SELECT date_id, rental_time_from, rental_time_to FROM post_request_durations; 
INSERT INTO durations (date_id, rental_time_from, rental_time_to)
SELECT r.date_id, r.rental_time_from, r.rental_time_to
FROM post_request_durations r
JOIN dates d ON r.date_id = d.id; 



drop table listing_rental_dates;
drop table listing_rental_durations;
drop table post_request_dates;
drop table post_request_durations;

ALTER TABLE posts MODIFY status ENUM('posted', 'pending', 'flagged', 'removed', 'offered');

ALTER TABLE students 
    MODIFY scanned_id VARCHAR(255) NOT NULL,
    MODIFY photo_with_id VARCHAR(255) NOT NULL;




CREATE TABLE items_for_sale (
    id INT AUTO_INCREMENT PRIMARY KEY,
    seller_id INT NOT NULL,
    category VARCHAR(50) NOT NULL,
    item_for_sale_name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    delivery_mode ENUM('pickup', 'meetup') DEFAULT 'pickup',
    specifications JSON,
    description TEXT,
    item_condition TEXT NOT NULL,
    tags JSON,
    status ENUM('available', 'rented', 'flagged', 'pending') NOT NULL,
    payment_mode ENUM('payment upon meetup', 'gcash') NOT NULL,
    images JSON,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

alter table listings modify column status enum('pending','approved', 'declined', 'removed', 'revoked', 'flagged');